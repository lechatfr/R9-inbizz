<?php

namespace R9\InbizzBundle\Repository;

use R9\InbizzBundle\Entity\Marque;
use R9\InbizzBundle\Entity\Contact;
use R9\UserBundle\Entity\User;

/**
 * MarqueRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MarqueRepository extends \Doctrine\ORM\EntityRepository
{
    public function getMarqueOwnerOrAllie(User $user)
      {
        $qb = $this
                ->createQueryBuilder('m')
                ->leftJoin('m.contacts', 'c', 'WITH', 'c.typecontact = :ctype')
                    ->setParameter('ctype', 'allie')
                ->addSelect('c')
                ->where('m.user = :userm')
                    ->setParameter('userm', $user)
                ->orWhere('c.user = :userc')
                    ->setParameter('userc', $user)
                ->orderBy('m.nom', 'ASC')
            ;

        return $qb
            ->getQuery()
            ->getResult()
        ;
      }
    
    public function allMarque()
      {
        $qb = $this
                ->createQueryBuilder('m')
                ->orderBy('m.nom', 'ASC')
            ;
        
        return $qb
            ->getQuery()
            ->getResult()
        ;
      }
    
    public function rechercheMarque($termList)
      {
        $qb = $this
                ->createQueryBuilder('m')
                ->where('m.id=0')
                ->orderBy('m.nom', 'ASC')
            ;
        
        $i=0;
        foreach ($termList as $value){
            if ($value!=''){
                $i++;
                $qb->orWhere(
                        $qb->expr()->like('m.nom', ':mnom'.$i)
                    )
                   ->setParameter('mnom'.$i, $value.'%')
                    ;
            }
        }
        
        return $qb
            ->getQuery()
            ->getResult()
        ;
      }
    
    public function autocompleteMarque($q)
      {
        $qb = $this->createQueryBuilder('m');
        $qb
        //    ->select('m.nom')
            ->where(
                    $qb->expr()->like('m.nom', ':mnom')
                )
               ->setParameter('mnom', $q.'%')
        ;
        
        return $qb
            ->getQuery()
            ->getResult()
        ;
      }
}
